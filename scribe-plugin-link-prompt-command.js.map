{"version":3,"file":"scribe-plugin-link-prompt-command.js","mappingssources":["../src/scribe-plugin-link-prompt-command.js"],"sourcesContent":["define('scribe-default-link-prompt', [], function() {\n  return function( attributes, resolve, reject) {\n    var href = window.prompt('Enter a link.', attributes.href);\n\n    if (href !== null) {\n      attributes.href = href;\n      resolve(attributes);\n    } else {\n      reject();\n    }\n  };\n});\n\ndefine('scribe-plugin-link-prompt-command',\n    ['scribe-default-link-prompt'],\n    function (defaultPrompt) {\n\n  /**\n   * This plugin adds a command for creating links, including a basic prompt.\n   */\n\n  'use strict';\n  return function (customPrompt) {\n    return function (scribe) {\n      var linkPromptCommand = new scribe.api.Command('createLink');\n\n      scribe.commands.linkPrompt = linkPromptCommand;\n\n      linkPromptCommand.nodeName = 'A';\n\n      linkPromptCommand.queryState = function () {\n        /**\n         * We override the native `document.queryCommandState` for links because\n         * the `createLink` and `unlink` commands are not supported.\n         * As per: http://jsbin.com/OCiJUZO/1/edit?js,console,output\n         */\n        var selection = new scribe.api.Selection();\n        return !! selection.getContaining(function (node) {\n          return node.nodeName === this.nodeName;\n        }.bind(this));\n      };\n\n      linkPromptCommand.execute = function () {\n        var selection = new scribe.api.Selection();\n        var range = selection.range;\n        var anchorNode = selection.getContaining(function (node) {\n          return node.nodeName === this.nodeName;\n        }.bind(this));\n\n        if (anchorNode) {\n          range.selectNode(anchorNode);\n          selection.selection.removeAllRanges();\n          selection.selection.addRange(range);\n        }\n\n        var initialAttributes = {};\n        if (anchorNode && anchorNode.hasAttributes()) {\n          for (var i = 0; i < anchorNode.attributes.length; i++) {\n            var attr = anchorNode.attributes[i];\n            initialAttributes[attr.name] = attr.value;\n          }\n        }\n\n        new Promise(function(resolve, reject) {\n          if (customPrompt) {\n            customPrompt(Object.create(initialAttributes), resolve, reject);\n          } else {\n            defaultPrompt(Object.create(initialAttributes), resolve, reject);\n          }\n        }).then(function(attributes) {\n          // FIXME: I don't like how plugins like this do so much. Is there a way\n          // to compose?\n\n          if (attributes.href) {\n            // Prepend href protocol if missing\n            // If a http/s or mailto link is provided, then we will trust that an link is valid\n            var urlProtocolRegExp = /^https?\\:\\/\\//;\n            var mailtoProtocolRegExp = /^mailto\\:/;\n            if (! urlProtocolRegExp.test(attributes.href) && ! mailtoProtocolRegExp.test(attributes.href)) {\n              // For emails we just look for a `@` symbol as it is easier.\n              if (/@/.test(attributes.href)) {\n                var shouldPrefixEmail = window.confirm(\n                    'The URL you entered appears to be an email address. ' +\n                    'Do you want to add the required “mailto:” prefix?'\n                    );\n                if (shouldPrefixEmail) {\n                  attributes.href = 'mailto:' + attributes.href;\n                }\n              } else {\n                var shouldPrefixLink = window.confirm(\n                    'The URL you entered appears to be a link. ' +\n                    'Do you want to add the required “http://” prefix?'\n                    );\n                if (shouldPrefixLink) {\n                  attributes.href = 'http://' + attributes.href;\n                }\n              }\n            }\n\n            // Restore the selection\n            selection = window.getSelection();\n            selection.removeAllRanges();\n            selection.addRange(range);\n\n            scribe.api.SimpleCommand.prototype.execute.call(this, attributes.href);\n\n            // Find the new anchor node\n            if (!anchorNode) {\n              anchorNode = range.commonAncestorContainer.previousSibling;\n            } else {\n              var anchorNodes = range.commonAncestorContainer.querySelectorAll('a');\n              for (var i=0; i<anchorNodes.length; i++) {\n                if (selection.containsNode(anchorNodes[i], true)) {\n                  anchorNode = anchorNodes[i];\n                  break;\n                }\n              }\n            }\n\n            for (var key in attributes) {\n              if (attributes.hasOwnProperty(key)) {\n                anchorNode.setAttribute(key, attributes[key]);\n              }\n            }\n          }\n        }.bind(this)).catch(function() {\n          // Cancel\n        });\n      };\n    };\n  };\n\n});\n\n"],"names":[]}